{"version":3,"sources":["webpack://Wsc/webpack/universalModuleDefinition","webpack://Wsc/webpack/bootstrap","webpack://Wsc/./lib/EventHandler.js","webpack://Wsc/./lib/RepositoryElement.js","webpack://Wsc/./lib/Repository.js","webpack://Wsc/./lib/EventHandlerRepository.js","webpack://Wsc/./lib/MessageRepository.js","webpack://Wsc/./lib/Main.js","webpack://Wsc/./index.js"],"names":["EventHandler","eventType","handler","_eventType","_handler","eventHandler","toString","RepositoryElement","id","value","_id","_value","Repository","_elementId","_repository","result","forEach","repositoryElement","map","element","push","index","repository","splice","length","EventHandlerRepository","getAll","filter","Boolean","getByEventType","getByHandler","deleteById","MessageRepository","Main","url","protocols","undefined","options","TypeError","_url","_protocols","_options","useMessageQueue","reconnection","reconnectionOptions","attempts","Infinity","delay","maxDelay","increaseDelay","_webSocket","_binaryType","_extensions","_protocol","_eventHandlerRepository","_messageRepository","_reconnectionAttemptAt","Date","now","_currentAttempts","_currentReconnectionDelay","window","WebSocket","error","Error","message","item","_executeCustomEvents","_addEventsFromStandardQueue","addEventListener","event","_sendMessagesFromQueue","wasClean","currentTimestamp","timeoutTimestamp","reconnect","setTimeout","readyState","OPEN","close","connect","data","send","add","code","reason","clear","_standardEventTypes","_customEventTypes","indexOf","key","deleteByEventType","deleteByHandler","call","deleteByIndex","binaryType","bufferedAmount","extensions","protocol","Wsc"],"mappings":"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","file":"wsc-2.0.1.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Wsc\"] = factory();\n\telse\n\t\troot[\"Wsc\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","'use strict';\r\n\r\nclass EventHandler {\r\n\r\n    /**\r\n     * Создаёт экземпляр класса.\r\n     *\r\n     * @param {string} eventType тип события\r\n     * @param {Function} handler обработчик события\r\n     */\r\n    constructor(eventType, handler) {\r\n        this._eventType = eventType;\r\n        this._handler = handler;\r\n    }\r\n\r\n    /**\r\n     * Получает тип события.\r\n     *\r\n     * @return {string} тип события\r\n     */\r\n    get eventType() {\r\n        return this._eventType;\r\n    }\r\n\r\n    /**\r\n     * Получает обработчик события.\r\n     *\r\n     * @return {Function} обработчик события\r\n     */\r\n    get handler() {\r\n        return this._handler;\r\n    }\r\n\r\n    /**\r\n     * Сравнивает текущий экземпляр класса с другим.\r\n     *\r\n     * @param {EventHandler} eventHandler экземпляр класса EventHandler\r\n     * @return {boolean} результат сравнения\r\n     */\r\n    compareTo(eventHandler) {\r\n        return (\r\n            eventHandler instanceof EventHandler &&\r\n            eventHandler.eventType === this._eventType &&\r\n            eventHandler.handler.toString() === this._handler.toString()\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventHandler;","'use strict';\r\n\r\nclass RepositoryElement {\r\n\r\n    /**\r\n     * Создаёт экземпляр класса.\r\n     *\r\n     * @param {number} id идентификатор элемента\r\n     * @param {*} value значение элемента\r\n     */\r\n    constructor(id, value) {\r\n        this._id = id;\r\n        this._value = value;\r\n    }\r\n\r\n    /**\r\n     * Получает идентификатор элемента.\r\n     *\r\n     * @return {number} идентификатор элемента\r\n     */\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * Получает значение элемента.\r\n     *\r\n     * @return {*} значение элемента\r\n     */\r\n    get value() {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Устанавливает значение элемента.\r\n     *\r\n     * @param {*} value значение элемента\r\n     */\r\n    set value(value) {\r\n        this._value = value;\r\n    }\r\n}\r\n\r\nexport default RepositoryElement;\r\n","'use strict';\r\n\r\nimport RepositoryElement from './RepositoryElement';\r\n\r\nclass Repository {\r\n\r\n    /**\r\n     * Создаёт экземпляр класса.\r\n     */\r\n    constructor() {\r\n        this._elementId = 0;\r\n        this._repository = [];\r\n    }\r\n\r\n    /**\r\n     * Получает элемент из хранилища по его идентификатору.\r\n     *\r\n     * @param {number} id индекс элемента в хранилище\r\n     * @return {*|null} элемент\r\n     */\r\n    getById(id) {\r\n        let result = null;\r\n        this._repository.forEach(repositoryElement => {\r\n            if (result === null && repositoryElement.id === id) {\r\n                result = repositoryElement.value;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Получает все элементы из хранилища.\r\n     *\r\n     * @return {Array} элементы хранилища\r\n     */\r\n    getAll() {\r\n        return this._repository.map(repositoryElement => {\r\n            return repositoryElement.value;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Добавляет элемент в хранилище.\r\n     *\r\n     * @param {*} element элемент\r\n     * @return {number} идентификатор элемента\r\n     */\r\n    add(element) {\r\n        let repositoryElement = new RepositoryElement(++this._elementId, element);\r\n        this._repository.push(repositoryElement);\r\n        return repositoryElement.id;\r\n    }\r\n\r\n    /**\r\n     * Удаляет элемент из хранилища по его идентификатору.\r\n     *\r\n     * @param {number} id идентификатор элемента\r\n     * @return {boolean} результат выполнения операции\r\n     */\r\n    deleteById(id) {\r\n        let result = false;\r\n        this._repository.forEach((repositoryElement, index, repository) => {\r\n            if (repositoryElement.id === id) {\r\n                repository.splice(index, 1);\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Удаляет элемент из хранилища по его индексу.\r\n     *\r\n     * @param {number} index порядковый индекс элемента в хранилище\r\n     * @return {boolean} результат выполнения операции\r\n     */\r\n    deleteByIndex(index) {\r\n        if (typeof this._repository[index] !== 'undefined') {\r\n            this._repository.splice(index, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Очищает хранилище.\r\n     */\r\n    clear() {\r\n        this._repository = [];\r\n    }\r\n\r\n    /**\r\n     * Получает элементов хранилища.\r\n     *\r\n     * @return {number} количество элементов хранилища.\r\n     */\r\n    get length() {\r\n        return this._repository.length;\r\n    }\r\n}\r\n\r\nexport default Repository;\r\n","'use strict';\r\n\r\nimport Repository from './Repository';\r\nimport RepositoryElement from './RepositoryElement';\r\nimport EventHandler from './EventHandler';\r\n\r\nclass EventHandlerRepository extends Repository {\r\n\r\n    /**\r\n     * Создаёт экземпляр класса.\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Добавляет элемент в хранилище.\r\n     *\r\n     * @param {EventHandler} eventHandler элемент\r\n     * @return {number} идентификатор элемента\r\n     */\r\n    add(eventHandler) {\r\n        return super.add(eventHandler);\r\n    }\r\n\r\n    /**\r\n     * Получает элементы из хранилища по типу события.\r\n     *\r\n     * @param {string} eventType тип события\r\n     * @return {Array} элементы хранилища\r\n     */\r\n    getByEventType(eventType) {\r\n        return this.getAll().filter(eventHandler => eventHandler.eventType === eventType);\r\n    }\r\n\r\n    /**\r\n     * Получает элементы из хранилища по обработчику события.\r\n     *\r\n     * @param {Function} handler обработчик события\r\n     * @return {Array} элементы хранилища\r\n     */\r\n    getByHandler(handler) {\r\n        return this.getAll().filter(eventHandler => eventHandler.handler.toString() === handler.toString());\r\n    }\r\n\r\n    /**\r\n     * Проверяет наличие элементов в хранилище по типу события.\r\n     *\r\n     * @param {string} eventType тип события\r\n     * @return {boolean} результат проверки\r\n     */\r\n    hasByEventType(eventType) {\r\n        return Boolean(this.getByEventType(eventType).length);\r\n    }\r\n\r\n    /**\r\n     * Проверяет наличие элементов в хранилище по обработчику события.\r\n     *\r\n     * @param {Function} handler обработчик события\r\n     * @return {boolean} результат проверки\r\n     */\r\n    hasByHandler(handler) {\r\n        return Boolean(this.getByHandler(handler).length);\r\n    }\r\n\r\n    /**\r\n     * Удаляет элементы из хранилища по типу события.\r\n     *\r\n     * @param {string} eventType тип события\r\n     * @return {boolean} результат выполнения операции\r\n     */\r\n    deleteByEventType(eventType) {\r\n        let result = false;\r\n        this._repository.forEach(repositoryElement => {\r\n            let eventHandler = repositoryElement.value;\r\n            if (eventHandler.eventType === eventType && this.deleteById(repositoryElement.id)) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Удаляет элементы из хранилища по обработчику события.\r\n     *\r\n     * @param {Function} handler обработчик события\r\n     * @return {boolean} результат выполнения операции\r\n     */\r\n    deleteByHandler(handler) {\r\n        let result = false;\r\n        this._repository.forEach(repositoryElement => {\r\n            let eventHandler = repositoryElement.value;\r\n            if (eventHandler.handler.toString() === handler.toString() && this.deleteById(repositoryElement.id)) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default EventHandlerRepository;\r\n","'use strict';\r\n\r\nimport Repository from './Repository';\r\n\r\nclass MessageRepository extends Repository {\r\n\r\n}\r\n\r\nexport default MessageRepository;\r\n","'use strict';\r\n\r\nimport EventHandler from './EventHandler';\r\nimport EventHandlerRepository from './EventHandlerRepository';\r\nimport MessageRepository from './MessageRepository';\r\n\r\nclass Main {\r\n\r\n    /**\r\n     * Создаёт экземпляр класса.\r\n     *\r\n     * @param {string} url URL-адрес для соединения\r\n     * @param {undefined|string|string[]} protocols протоколы\r\n     * @param {{}} options дополнительные опции\r\n     * @throws {TypeError} ошибка указания параметров при создании экземпляра\r\n     */\r\n    constructor(url, protocols = undefined, options = {}) {\r\n\r\n        if (typeof url === 'undefined') {\r\n            throw new TypeError('Required URL parameter is missing');\r\n        }\r\n\r\n        if (typeof options !== 'object') {\r\n            throw new TypeError('Options is must be an object');\r\n        }\r\n\r\n        /**\r\n         * URL-адрес для соединения.\r\n         *\r\n         * @type {string}\r\n         * @private\r\n         */\r\n        this._url = url;\r\n\r\n        /**\r\n         * Протоколы.\r\n         *\r\n         * @type {string[]}\r\n         * @private\r\n         */\r\n        this._protocols = protocols;\r\n\r\n        /**\r\n         * Дополнительные опции.\r\n         *\r\n         * @type {{}}\r\n         * @private\r\n         */\r\n        this._options = {\r\n            ...{\r\n                useMessageQueue: true, // использование отправки сообщений из очереди (которые накопились при неактивном соединении)\r\n                reconnection: true, // использование переподключения\r\n                reconnectionOptions: { // опции переподключения\r\n                    attempts: Infinity, // количество попыток переподключения\r\n                    delay: 1000, // время задержки переподключения\r\n                    maxDelay: 5000, // максимальное время задержки переподключения\r\n                    increaseDelay: 1000, // время для увеличения задержки переподключения после каждой попытки\r\n                }\r\n            },\r\n            ...options,\r\n        };\r\n\r\n        /**\r\n         * Вебсокет.\r\n         *\r\n         * @type {undefined|WebSocket}\r\n         * @private\r\n         */\r\n        this._webSocket = undefined;\r\n\r\n        /**\r\n         * Тип двоичных данных.\r\n         *\r\n         * @type {undefined|string}\r\n         * @private\r\n         */\r\n        this._binaryType = undefined;\r\n\r\n        /**\r\n         * Расширения, выбранные сервером. В настоящее время это только пустая строка или список расширений,\r\n         * согласованных соединением.\r\n         *\r\n         * @type {undefined|string} расширения, выбранные сервером\r\n         * @private\r\n         */\r\n        this._extensions = undefined;\r\n\r\n        /**\r\n         * Строка, обозначающая имя подпротокола выбранного сервера.\r\n         *\r\n         * @type {undefined|string} строка, обозначающая имя подпротокола выбранного сервера\r\n         * @private\r\n         */\r\n        this._protocol = undefined;\r\n\r\n        /**\r\n         * Репозиторий обработчиков событий.\r\n         *\r\n         * @type {EventHandlerRepository} репозиторий обработчиков событий\r\n         * @private\r\n         */\r\n        this._eventHandlerRepository = new EventHandlerRepository();\r\n\r\n        /**\r\n         * Репозиторий очереди сообщений.\r\n         *\r\n         * @type {MessageRepository} репозиторий очереди сообщений\r\n         * @private\r\n         */\r\n        this._messageRepository = new MessageRepository();\r\n\r\n        /**\r\n         * Время последней попытки переподключения.\r\n         *\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._reconnectionAttemptAt = Date.now();\r\n\r\n        /**\r\n         * Текущее количество попыток переподключения.\r\n         *\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._currentAttempts = 0;\r\n\r\n        /**\r\n         * Текущее время задержки переподключения.\r\n         *\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._currentReconnectionDelay = this._options.reconnectionOptions.delay;\r\n    }\r\n\r\n    /**\r\n     * Получает тип двоичных данных.\r\n     *\r\n     * @return {string} тип двоичных данных\r\n     */\r\n    get binaryType() {\r\n        if (this._webSocket instanceof window.WebSocket) {\r\n            return this._webSocket.binaryType;\r\n        } else if (typeof this._binaryType !== 'undefined') {\r\n            return typeof this._binaryType;\r\n        } else {\r\n            return 'blob';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Устанавливает тип двоичных данных.\r\n     *\r\n     * @param {string} value тип двоичных данных\r\n     */\r\n    set binaryType(value) {\r\n        this._binaryType = value;\r\n        if (this._webSocket instanceof window.WebSocket) {\r\n            this._webSocket.binaryType = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Получает количество байтов данных, которые были поставлены в очередь, используя вызовы send(),\r\n     * но ещё не переданные в сеть.\r\n     */\r\n    get bufferedAmount() {\r\n        return (this._webSocket instanceof window.WebSocket)\r\n            ? this._webSocket.bufferedAmount\r\n            : 0;\r\n    }\r\n\r\n    /**\r\n     * Получает расширения, выбранные сервером.\r\n     *\r\n     * @return {string} расширения, выбранные сервером\r\n     */\r\n    get extensions() {\r\n        if (this._webSocket instanceof window.WebSocket) {\r\n            return this._webSocket.extensions;\r\n        } else if (typeof this._extensions !== 'undefined') {\r\n            return typeof this._extensions;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Устанавливает расширения, выбранные сервером.\r\n     *\r\n     * @param {string} value расширения, выбранные сервером\r\n     */\r\n    set extensions(value) {\r\n        this._binaryType = extensions;\r\n        if (this._webSocket instanceof window.WebSocket) {\r\n            this._webSocket.extensions = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Получает расширения, выбранные сервером\r\n     *\r\n     * @return {string} расширения, выбранные сервером\r\n     */\r\n    get protocol() {\r\n        if (this._webSocket instanceof window.WebSocket) {\r\n            return this._webSocket.protocol;\r\n        } else if (typeof this._protocol !== 'undefined') {\r\n            return typeof this._protocol;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Устанавливает расширения, выбранные сервером\r\n     *\r\n     * @param {string} value расширения, выбранные сервером\r\n     */\r\n    set protocol(value) {\r\n        this._protocol = value;\r\n        if (this._webSocket instanceof window.WebSocket) {\r\n            this._webSocket.extensions = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Получает текущее состояние подключения.\r\n     *\r\n     * @return {number} текущее состояние подключения\r\n     */\r\n    get readyState() {\r\n        return (this._webSocket instanceof window.WebSocket) ? this._webSocket.readyState : 0;\r\n    }\r\n\r\n    /**\r\n     * Получает URL-адрес для соединения.\r\n     *\r\n     * @return {string} URL-адрес для соединения\r\n     */\r\n    get url() {\r\n        return (this._webSocket instanceof window.WebSocket) ? this._webSocket.url : this._url;\r\n    }\r\n\r\n    /**\r\n     * Получает стандартные типы событий вебсокета.\r\n     *\r\n     * @return {string[]} стандартные типы событий вебсокета\r\n     * @private\r\n     */\r\n    static get _standardEventTypes() {\r\n        return ['open', 'message', 'close', 'error'];\r\n    }\r\n\r\n    /**\r\n     * Получает кастомные типы событий вебсокета.\r\n     *\r\n     * @return {string[]} кастомные типы событий вебсокета\r\n     * @private\r\n     */\r\n    static get _customEventTypes() {\r\n        return ['opening', 'closing', 'ready'];\r\n    }\r\n\r\n    /**\r\n     * Устанавливает соединение.\r\n     *\r\n     * @throws {Error} ошибка установки соединения\r\n     */\r\n    connect() {\r\n        // создание объекта для управление вебсокет-соединением\r\n        try {\r\n            this._webSocket = new window.WebSocket(this._url, this._protocols);\r\n        } catch (error) {\r\n            throw new Error(error.message);\r\n        }\r\n\r\n        // установка свойств\r\n        ['binaryType', 'extensions', 'protocol'].forEach(item => {\r\n            if (typeof this['_' + item] !== 'undefined') {\r\n                this._webSocket[item] = this[item]\r\n            }\r\n        });\r\n\r\n        // добавление и выполнение событий\r\n        this._executeCustomEvents('opening');\r\n        this._addEventsFromStandardQueue();\r\n\r\n        // выполнение отправки отложенных сообщений\r\n        this._webSocket.addEventListener('open', (event) => {\r\n            this._currentAttempts = 0;\r\n            this._currentReconnectionDelay = this._options.reconnectionOptions.delay;\r\n            this._sendMessagesFromQueue();\r\n            this._executeCustomEvents('ready', event);\r\n        });\r\n\r\n        // выполнение автоматического переподключения соединения\r\n        if (this._options.reconnection) {\r\n            this._webSocket.addEventListener('close', (event) => {\r\n                if (!event.wasClean && (this._currentAttempts < this._options.reconnectionOptions.attempts)) {\r\n                    let currentTimestamp = Date.now();\r\n                    let timeoutTimestamp = this._currentReconnectionDelay - (currentTimestamp - this._reconnectionAttemptAt);\r\n                    if (timeoutTimestamp < 0) {\r\n                        this.reconnect();\r\n                    } else {\r\n                        setTimeout(() => {\r\n                            this.reconnect();\r\n                        }, timeoutTimestamp);\r\n                    }\r\n                    this._currentAttempts++;\r\n                    this._currentReconnectionDelay += this._options.reconnectionOptions.increaseDelay;\r\n                    if (this._currentReconnectionDelay > this._options.reconnectionOptions.maxDelay) {\r\n                        this._currentReconnectionDelay = this._options.reconnectionOptions.maxDelay;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Переоткрывает соединение если оно было открыто первоначально.\r\n     *\r\n     * @throws {Error} ошибка проверки типа объекта для управление вебсокет-соединением\r\n     */\r\n    reconnect() {\r\n        if (!(this._webSocket instanceof window.WebSocket)) {\r\n            throw new Error('WebSocket instance is not defined');\r\n        } else {\r\n            this._reconnectionAttemptAt = Date.now();\r\n            if (this._webSocket.readyState === window.WebSocket.OPEN) {\r\n                this._webSocket.close();\r\n            }\r\n            this.connect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Передаёт данные на сервер.\r\n     *\r\n     * @param {string|ArrayBufferLike|Blob|ArrayBufferView} data данные\r\n     */\r\n    send(data) {\r\n        if (this._webSocket instanceof window.WebSocket && this._webSocket.readyState === window.WebSocket.OPEN) {\r\n            this._webSocket.send(data);\r\n        } else if (this._options.useMessageQueue) {\r\n            this._messageRepository.add(data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Закрывает соединние.\r\n     *\r\n     * @param {number} code код закрытия\r\n     * @param {string} reason описание закрытия\r\n     * @throws {Error} ошибка закрытия соединения\r\n     */\r\n    close(code = 1000, reason) {\r\n        this._executeCustomEvents('closing');\r\n        this._messageRepository.clear();\r\n        if (this._options.reconnection) {\r\n            this._currentAttempts = this._options.reconnectionOptions.attempts;\r\n        }\r\n        try {\r\n            this._webSocket.close(code, reason);\r\n        } catch (error) {\r\n            throw new Error(error.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Устанавливает обработчик события и возвращает его идентификатор.\r\n     *\r\n     * @param {string} eventType тип события\r\n     * @param {Function} handler обработчик события\r\n     * @return {number|boolean} идентификатор обработчика события или false\r\n     * @throws {TypeError} ошибка указания параметров\r\n     */\r\n    on(eventType, handler) {\r\n        if ([...Main._standardEventTypes, ...Main._customEventTypes].indexOf(eventType) > -1) {\r\n            return this._eventHandlerRepository.add(new EventHandler(eventType, handler));\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Удаляет обработчик события по идентификатору обработчика события, типу события или самому обработчику.\r\n     *\r\n     * @param {number|string|Function} key ключ\r\n     * @return {boolean} результат выполнения операции\r\n     * @throws {TypeError} ошибка указания параметров\r\n     */\r\n    off(key) {\r\n        let result = false;\r\n        switch (typeof key) {\r\n            case 'number':\r\n                result = this._eventHandlerRepository.deleteById(key);\r\n                break;\r\n            case 'string':\r\n                result = this._eventHandlerRepository.deleteByEventType(key);\r\n                break;\r\n            case 'function':\r\n                result = this._eventHandlerRepository.deleteByHandler(key);\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Устанавливает события из очереди стандратных событий.\r\n     *\r\n     * @private\r\n     */\r\n    _addEventsFromStandardQueue() {\r\n        Main._standardEventTypes.forEach(eventType => {\r\n            this._webSocket.addEventListener(eventType, (event) => {\r\n                this._eventHandlerRepository.getByEventType(eventType).forEach(eventHandler => {\r\n                    eventHandler.handler.call(this, event);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Выполняет кастомные события.\r\n     *\r\n     * @param {string} eventType тип события\r\n     * @param {Event} event событие\r\n     * @private\r\n     */\r\n    _executeCustomEvents(eventType, event = null) {\r\n        this._eventHandlerRepository.getByEventType(eventType).forEach(eventHandler => {\r\n            eventHandler.handler.call(this, event);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Отправляет сообщения из очереди.\r\n     *\r\n     * @private\r\n     */\r\n    _sendMessagesFromQueue() {\r\n        this._messageRepository.getAll().forEach((message, index) => {\r\n            if (this._webSocket.readyState === window.WebSocket.OPEN) {\r\n                this.send(message);\r\n                this._messageRepository.deleteByIndex(index);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","'use strict';\r\n\r\nimport Wsc from './lib/Main';\r\n\r\nexport default Wsc;"],"sourceRoot":""}